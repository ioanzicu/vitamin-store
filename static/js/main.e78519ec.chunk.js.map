{"version":3,"sources":["logo.png","components/Card.js","components/Loading.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","animation","id","showBack","showFront","description","height","offset","className","onClick","src","alt","Loading","Navigation","closeNav","href","App","useState","toggleLogo","setToggleLogo","forceUpdate","setForceUpdate","loading","setLoading","cards","setCards","useEffect","data","setTimeout","toggleLogoEvent","event","openNav","document","getElementById","style","width","logo","onMouseEnter","onMouseLeave","map","card","duration","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,+2ZC6B5BC,EAzBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,YAAvC,OACX,kBAAC,IAAD,CAAUC,OAAQ,IAAKC,QAAS,KAC9B,yBAAKC,UAAWP,GACd,yBAAKO,UAAU,QAAQC,QAAS,kBAAMN,EAASD,KAC7C,yBAAKQ,IAAI,YAAYC,IAAI,gBAAgBH,UAAU,eACnD,yBAAKA,UAAU,aACb,4CACe,0BAAMA,UAAU,SAAhB,YAEf,qKAMJ,yBAAKA,UAAU,sBAAsBC,QAAS,kBAAML,EAAUF,KAC5D,4CACe,0BAAMM,UAAU,SAAhB,YAEf,2BAAIH,OCNGO,G,MAdC,kBACd,oCACE,yBAAKJ,UAAU,YACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,kBAEjB,iFCKWK,G,MAfI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,yBAAKZ,GAAG,QAAQM,UAAU,WACxB,uBAAGA,UAAU,YAAYC,QAAS,kBAAMK,MAAxC,QAGA,yBAAKN,UAAU,mBACb,uBAAGO,KAAK,IAAR,iBACA,uBAAGA,KAAK,IAAR,YAEA,uBAAGA,KAAK,IAAR,eACA,uBAAGA,KAAK,IAAR,e,OCgESC,EArEH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACTC,EADS,KACGC,EADH,OAEsBF,oBAAS,GAF/B,mBAETG,EAFS,KAEIC,EAFJ,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAKUN,mBAAS,IALnB,mBAKTO,EALS,KAKFC,EALE,KAOhBC,qBAAU,WACRD,EAASE,GACTC,YAAW,WACTL,GAAW,KACV,OACF,CAACC,IAEJ,IAAMK,EAAkB,SAAAC,GAAK,OAAIX,GAAeD,IAE1Cf,EAAW,SAAAD,GACfsB,EAAMtB,GAAID,UAAY,iBACtBwB,EAASD,GACTH,GAAgBD,IAGZhB,EAAY,SAAAF,GAChBsB,EAAMtB,GAAID,UAAY,OACtBwB,EAASD,GACTH,GAAgBD,IAGZW,EAAU,kBAAOC,SAASC,eAAe,SAASC,MAAMC,MAAQ,QAItE,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBACEE,IAAK0B,IACL5B,UAAWU,EAAa,cAAgB,6BACxCmB,aAAcR,EACdS,aAAcT,EACdlB,IAAI,OACJF,QAASsB,IAEX,wBACEvB,UAAWU,EAAa,cAAgB,6BACxCT,QAASsB,GAFX,QAKA,kBAAC,EAAD,CAAYjB,SAlBD,kBAAOkB,SAASC,eAAe,SAASC,MAAMC,MAAQ,SAoBlEb,EACC,kBAAC,EAAD,MAEA,yBAAKd,UAAU,4BACZgB,EAAMe,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,iBACMA,EADN,CAEErC,SAAUA,EACVC,UAAWA,EACXqC,SAAU,IACVC,IAAKF,EAAKtC,YCxDJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD2H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e78519ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a68903b3.png\";","import React from 'react'\nimport './Card.css'\nimport LazyLoad from 'react-lazyload'\n\nconst Card = ({ animation, id, showBack, showFront, description }) => (\n  <LazyLoad height={650} offset={-100}>\n    <div className={animation}>\n      <div className='front' onClick={() => showBack(id)}>\n        <img src='juice.jpg' alt='Vitamin Juice' className='card-image' />\n        <div className='container'>\n          <h3>\n            Vitamin Juice<span className='price'> $24.99</span>\n          </h3>\n          <p>\n            Need a jun on your vitamins while drinking? Tired of popping pills?\n            Drink our vitamin enhanced juice, available in several flavours.\n          </p>\n        </div>\n      </div>\n      <div className='container-back back' onClick={() => showFront(id)}>\n        <h3>\n          Vitamin Juice<span className='price'> $24.99</span>\n        </h3>\n        <p>{description}</p>\n      </div>\n    </div>\n  </LazyLoad>\n)\n\nexport default Card\n","import React from 'react'\nimport './Loading.css'\n\nconst Loading = () => (\n  <>\n    <div className='sk-chase'>\n      <div className='sk-chase-dot'></div>\n      <div className='sk-chase-dot'></div>\n      <div className='sk-chase-dot'></div>\n      <div className='sk-chase-dot'></div>\n      <div className='sk-chase-dot'></div>\n      <div className='sk-chase-dot'></div>\n    </div>\n    <h1>Once these circles disappear, begin scrolling!</h1>\n  </>\n)\n\nexport default Loading\n","import React from 'react'\nimport './Navigation.css'\n\nconst Navigation = ({ closeNav }) => (\n  <div id='myNav' className='overlay'>\n    <a className='close-btn' onClick={() => closeNav()}>\n      &times;\n    </a>\n    <div className='overlay-content'>\n      <a href=''>Vitamin Juice</a>\n      <a href=''>Clothing</a>\n\n      <a href=''>Supplements</a>\n      <a href=''>Contact</a>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React, { useState, useEffect } from 'react'\nimport logo from './logo.png'\nimport './App.css'\nimport Card from './components/Card'\nimport Loading from './components/Loading'\nimport Navigation from './components/Navigation'\nimport data from './data/data.json'\n\nconst App = () => {\n  const [toggleLogo, setToggleLogo] = useState(true)\n  const [forceUpdate, setForceUpdate] = useState(true)\n  const [loading, setLoading] = useState(true)\n\n  const [cards, setCards] = useState([])\n\n  useEffect(() => {\n    setCards(data)\n    setTimeout(() => {\n      setLoading(false)\n    }, 3000)\n  }, [cards])\n\n  const toggleLogoEvent = event => setToggleLogo(!toggleLogo)\n\n  const showBack = id => {\n    cards[id].animation = 'card card-flip'\n    setCards(cards)\n    setForceUpdate(!forceUpdate)\n  }\n\n  const showFront = id => {\n    cards[id].animation = 'card'\n    setCards(cards)\n    setForceUpdate(!forceUpdate)\n  }\n\n  const openNav = () => (document.getElementById('myNav').style.width = '100%')\n\n  const closeNav = () => (document.getElementById('myNav').style.width = '0%')\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img\n          src={logo}\n          className={toggleLogo ? 'static-logo' : 'static-logo animated jello'}\n          onMouseEnter={toggleLogoEvent}\n          onMouseLeave={toggleLogoEvent}\n          alt='logo'\n          onClick={openNav}\n        />\n        <h1\n          className={toggleLogo ? 'menu-hidden' : 'menu animated bounceInDown'}\n          onClick={openNav}>\n          Menu\n        </h1>\n        <Navigation closeNav={closeNav} />\n      </header>\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className='Grid animated bounceInUp'>\n          {cards.map(card => (\n            <Card\n              {...card}\n              showBack={showBack}\n              showFront={showFront}\n              duration={150}\n              key={card.id}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}